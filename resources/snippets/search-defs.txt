function tokenizeTerms(searchTerms)
		{
			let tokenRegex = /-?\w*[!:<>=]?(([^ "\(\)\/“”]+)|(\".+?\")|(\(.+?\))|(\/.+?\/)|(\“.+?\”))/g;
			let searchTokens = searchTerms.match(tokenRegex);

			return searchTokens;
		}

		function searchAllTokens(card, tokens)
		{
			if (tokens == null || tokens == '')
			{
				return true;
			}
			for (let i = 0; i < tokens.length; i++)
			{
				if (tokens[i].charAt(0) == '+')
				{
					return searchAllTokens(card, tokens.slice(0, i)) && searchAllTokens(card, tokens.slice(i + 1));
				}
				if (tokens[i] == "or")
				{
					return searchAllTokens(card, tokens.slice(0, i)) || searchAllTokens(card, tokens.slice(i + 1));
				}
			}

			for (let token of tokens)
			{
				if (token.charAt(0) == '-')
				{
					return !searchToken(card, token.substring(1)) && (tokens.length == 1 ? true : searchAllTokens(card, tokens.slice(1)));
				}
				if (token.charAt(0) == '(')
				{
					return searchAllTokens(card, tokenizeTerms(token.substring(1, token.length - 1))) && (tokens.length == 1 ? true : searchAllTokens(card, tokens.slice(1)));
				}
				else
				{
					return searchToken(card, token) && (tokens.length == 1 ? true : searchAllTokens(card, tokens.slice(1)));
				}
			}
		}

		function removeDuplicateChars(str)
		{
			let ret_str = '';

			for (const c of str)
			{
				if (!ret_str.includes(c))
				{
					ret_str += c;
				}
			}

			return ret_str;
		}

		function convertToMV(cost)
		{
			let mv = 0;
			
			costTokens = cost.substring(1, cost.length - 1).replaceAll("}{"," ").split(' ');
			for (const token of costTokens)
			{
				if (isDecimal(token))
				{
					mv += parseInt(token);
				}
				// 2brid
				else if (token.includes('2'))
				{
					mv += 2;
				}
				else if (token != "x")
				{
					mv += 1;
				}
			}

			return mv;
		}

		function searchToken(card, token)
		{
			let card_stats = [];

			for (var key in card)
			{
				if (isNaN(card[key]))
				{
					card_stats[key] = card[key].toLowerCase();
				}
				else
				{
					card_stats[key] = card[key];
				}
			}

			let card_name = card_stats.card_name;
			let card_color = card_stats.color;
			let card_rarity = card_stats.rarity;
			let card_type = card_stats.type;
			// 4: collector number
			let card_ci = removeDuplicateChars(card_stats.color_identity);
			let card_cost = card_stats.cost;
			let card_mv = convertToMV(card_cost);
			//Strip out the lingering [i][/i] and [b][/b] tags while we're searching just in case someone decided to bold something in the
			//middle of their rules text for some reason
			let card_oracle_text = card_stats.rules_text != "" ? card_stats.rules_text.replace(/\[(\/)?([ib])\]/g, "") : card_stats.special_text.replace(/\[(\/)?([ib])\]/g, "");
			let card_power = card_stats.pt.substring(0,card_stats.pt.indexOf('/'));
			let card_toughness = card_stats.pt.substring(card_stats.pt.indexOf('/')+1);
			let card_shape = card_stats.shape;
			let card_set = card_stats.set;
			let card_loyalty = card_stats.loyalty;
			let card_notes = card_stats.notes;
			let card_artist = card_stats.artist;
			let card_color_2 = "";
			let card_cost_2 = "";
			let card_power_2 = "";
			let card_toughness_2 = "";
			let card_loyalty_2 = ""

			let color_map = new Map([
				["azorius", "wu"],
				["dimir", "ub"],
				["rakdos", "br"],
				["gruul", "rg"],
				["selesnya", "gw"],
				["orzhov", "wb"],
				["golgari", "bg"],
				["simic", "gu"],
				["izzet", "ur"],
				["boros", "rw"],
				["esper", "wub"],
				["grixis", "ubr"],
				["jund", "brg"],
				["naya", "rgw"],
				["bant", "gwu"],
				["abzan", "wbg"],
				["sultai", "bgu"],
				["temur", "gur"],
				["jeskai", "urw"],
				["mardu", "rwb"],
			]);

			// two cards in one
			if (card_shape.includes("adventure") || card_shape.includes("double") || card_shape.includes("spli"))
			{
				card_name = card_name + "	" + card_stats.card_name2;
				card_type = card_type + "	" + card_stats.type2;
				card_oracle_text = card_oracle_text + "	" + (card_stats.rules_text2 != "" ? card_stats.rules_text2.replace(/\[(\/)?([ib])\]/g, "") : card_stats.special_text2.replace(/\[(\/)?([ib])\]/g, ""));
				card_color_2 = card_stats.color2;
				card_cost_2 = card_stats.cost2;
				card_power_2 = card_stats.pt2.substring(0,card_stats.pt2.indexOf('/'));
				card_toughness_2 = card_stats.pt.substring(card_stats.pt.indexOf('/')+1);
				card_loyalty_2 = card_stats.loyalty2;
			}

			token = token.replaceAll("~", card_name).replaceAll("cardname", card_name).replaceAll('"','').replaceAll('“','').replaceAll('”','');

			const modifierRegex = /[!:<>=]+/g;
			const match = token.match(modifierRegex);

			if (match)
			{
				const modifier = match[0];
				const term = token.substring(0, token.indexOf(modifier));
				let check = token.substring(token.indexOf(modifier) + modifier.length);

				if (check.charAt(0) == '/')
				{
					check = check.substring(1);
				}
				if (check.charAt(check.length - 1) == '/')
				{
					check = check.substring(0,check.length - 1);
				}

				if (color_map.has(check))
				{
					check = color_map.get(check);
				}

				// availableTokens = ["mv", "c", "ci", "t", "o", "pow", "tou", "r", "is"]

				/* template
				if (term == "mv")
				{
					if (modifier == "!" || modifier == "=")
					{

					}
					else if (modifier == ":")
					{

					}
					else if (modifier == "<")
					{

					}
					else if (modifier == ">")
					{

					}
				} */
				if (term == "mv")
				{
					if (modifier == "!" || modifier == "=")
					{
						return (card_mv == check);
					}
					else if (modifier == ":")
					{
						return (card_mv == check);
					}
					else if (modifier == "<")
					{
						return (card_mv < check);
					}
					else if (modifier == ">")
					{
						return (card_mv > check);
					}
					else if (modifier == "<=")
					{
						return (card_mv <= check);
					}
					else if (modifier == ">=")
					{
						return (card_mv >= check);
					}
				}
				if (term == "c" || term == "color")
				{
					if (!isNaN(check))
					{
						if (modifier == "!" || modifier == "=")
						{
							return card_color.length == parseInt(check);
						}
						else if (modifier == ":")
						{
							return card_color.length == parseInt(check);
						}
						else if (modifier == "<")
						{
							return card_color.length < parseInt(check);
						}
						else if (modifier == ">")
						{
							return card_color.length > parseInt(check);
						}
						else if (modifier == "<=")
						{
							return card_color.length <= parseInt(check);
						}
						else if (modifier == ">=")
						{
							return card_color.length >= parseInt(check);
						}
					}
					else
					{
						card_color = card_color == "" ? "c" : card_color;
						if (check == "m")
						{
							if (modifier == "<")
							{
								return card_color.length < 2;
							}
							else
							{
								return card_color.length > 1;							
							}
						}
						else if (modifier == "!" || modifier == "=")
						{
							return (card_color.split("").sort().join("") == check.split("").sort().join(""));
						}
						else if (modifier == ":")
						{
							return hasAllChars(card_color, check);
						}
						else if (modifier == "<")
						{
							return card_color == "c" || (check.length > card_color.length && hasAllChars(check, card_color));
						}
						else if (modifier == ">")
						{
							return card_color.length > check.length && hasAllChars(card_color, check);
						}
						else if (modifier == "<=")
						{
							return card_color == "c" || hasAllChars(check, card_color);
						}
						else if (modifier == ">=")
						{
							return hasAllChars(card_color, check);
						}
					}
				}
				if (term == "cost" || term == "mana")
				{
					if (modifier == "!" || modifier == "=" || modifier == ":")
					{
						card_cost_cleaned = card_cost.replaceAll('{', '').replaceAll('}', '');
						return check == card_cost || check == card_cost_cleaned;
					}
				}
				if (term == "ci" || term == "id")
				{
					if (!isNaN(check))
					{
						card_ci = card_ci == "c" ? "" : card_ci;
						if (modifier == "!" || modifier == "=")
						{
							return card_ci.length == parseInt(check);
						}
						else if (modifier == ":")
						{
							return card_ci.length == parseInt(check);
						}
						else if (modifier == "<")
						{
							return card_ci.length < parseInt(check);
						}
						else if (modifier == ">")
						{
							return card_ci.length > parseInt(check);
						}
						else if (modifier == "<=")
						{
							return card_ci.length <= parseInt(check);
						}
						else if (modifier == ">=")
						{
							return card_ci.length >= parseInt(check);
						}
					}
					else
					{
						if (modifier == "!" || modifier == "=")
						{
							return (card_ci.split("").sort().join("") == check.split("").sort().join(""));
						}
						else if (modifier == ":")
						{
							return hasAllChars(card_ci, check);
						}
						else if (modifier == "<")
						{
							return card_ci == "c" || (check.length > card_ci.length && hasAllChars(check, card_ci));
						}
						else if (modifier == ">")
						{
							return card_ci.length > check.length && hasAllChars(card_ci, check);
						}
						else if (modifier == "<=")
						{
							return card_ci == "c" || hasAllChars(check, card_ci);
						}
						else if (modifier == ">=")
						{
							return hasAllChars(card_ci, check);
						}
					}
				}
				if (term == "t" || term == "type")
				{
					if (modifier == ":")
					{
						regex = new RegExp("\\b" + check + "\\b");
						return regex.test(card_type);
					}
					/* unsupported flows
					if (modifier == "!" || modifier == "=")
					{

					}
					else if (modifier == "<")
					{

					}
					else if (modifier == ">")
					{

					} */
				}
				if (term == "o")
				{
					if (modifier == ":")
					{
						regex = new RegExp(check.replaceAll("+","\\+"));
						return regex.test(card_oracle_text);
					}
					/* unsupported flows
					if (modifier == "!" || modifier == "=")
					{

					}
					else if (modifier == "<")
					{

					}
					else if (modifier == ">")
					{

					} */
				}
				if (term == "pow" || term == "power")
				{
					if (modifier == "!" || modifier == "=")
					{
						return (card_power == check);
					}
					else if (modifier == ":")
					{
						return (card_power == check);
					}
					else if (modifier == "<")
					{
						return (card_power < check);
					}
					else if (modifier == ">")
					{
						return (card_power > check);
					}
					else if (modifier == "<=")
					{
						return (card_power <= check);
					}
					else if (modifier == ">=")
					{
						return (card_power >= check);
					}
				}
				if (term == "tou" || term == "toughness")
				{
					if (modifier == "!" || modifier == "=")
					{
						return (card_toughness == check);
					}
					else if (modifier == ":")
					{
						return (card_toughness == check);
					}
					else if (modifier == "<")
					{
						return (card_toughness < check);
					}
					else if (modifier == ">")
					{
						return (card_toughness > check);
					}
					else if (modifier == "<=")
					{
						return (card_toughness <= check);
					}
					else if (modifier == ">=")
					{
						return (card_toughness >= check);
					}
				}
				if (term == "r" || term == "rarity")
				{
					rarities = [ "common", "uncommon", "rare", "mythic" ];
					for (const rarity of rarities)
					{
						if (rarity.startsWith(check))
						{
							check = rarity;
						}
					}
					if (modifier == ":" || modifier == "!" || modifier == "=")
					{
						return (card_rarity == check);
					}
					else if (modifier == "<")
					{
						return rarities.includes(card_rarity) && rarities.indexOf(card_rarity) < rarities.indexOf(check);
					}
					else if (modifier == ">")
					{
						return rarities.includes(card_rarity) && rarities.indexOf(card_rarity) > rarities.indexOf(check);
					}
					else if (modifier == "<=")
					{
						return rarities.includes(card_rarity) && rarities.indexOf(card_rarity) <= rarities.indexOf(check);
					}
					else if (modifier == ">=")
					{
						return rarities.includes(card_rarity) && rarities.indexOf(card_rarity) >= rarities.indexOf(check);
					}
				}
				if (term == "e" || term == "set")
				{
					if (modifier == ":" || modifier == "!" || modifier == "=")
					{
						return (card_set == check);
					}
					/* unsupported flows
					else if (modifier == "<")
					{

					}
					else if (modifier == ">")
					{

					} */
				}
				if (term == "keyword" || term=="kw" || term == "has")
				{
					if (modifier == ":" || modifier == "!" || modifier == "=")
					{
						regex_kw1 = new RegExp(`(^|\n|, )${check}[^.]*($|\n|\\()`, "g");
						regex_kw2 = new RegExp(`(^|\n)${check} `, "g");
						return regex_kw1.test(card_oracle_text) || regex_kw2.test(card_oracle_text);
					}
					/* unsupported flows
					else if (modifier == "<")
					{

					}
					else if (modifier == ">")
					{

					} */
				}
				if (term == "f" || term=="format")
				{
					if (modifier == ":" || modifier == "!" || modifier == "=")
					{
						for (const set of sets_json.sets)
						{
							if (set.set_code.toLowerCase() == card_set)
							{
								formats = [ "standard", "modern", "legacy" ];
								set_formats = set.formats.toLowerCase().replace(' ','').split(',');

								for (const format of set_formats)
								{
									if (formats.includes(format) && formats.includes(check))
									{
										if (formats.indexOf(format) < formats.indexOf(check))
										{
											return true;
										}
									}
								}

								return set_formats.includes(check);
							}
						}
					}
					return false;
				}
				if (term == "is")
				{
					if (modifier == ":" || modifier == "!" || modifier == "=")
					{
						// all of these are implemented individually
						if (check == "permanent")
						{
							return !card_type.includes("instant") && !card_type.includes("sorcery");
						}
						if (check == "spell")
						{
							return !card_type.includes("land");
						}
						if (check == "commander")
						{
							return (card_type.includes("legendary") && card_type.includes("creature")) || card_oracle_text.includes("can be your commander");
						}
						if (check == "hybrid")
						{
							for (let i = 0; i < card_cost.length - 2; i++)
							{
								if (card_cost[i] != '{' && card_cost[i] != '}' && card_cost[i + 1] != '{' && card_cost[i + 1] != '}' && !isDecimal(card_cost[i + 1]))
								{
									return true;
								}
							}
							return false;
						}
					}
					/* unsupported flows
					else if (modifier == "<")
					{

					}
					else if (modifier == ">")
					{

					} */
				}
				if (term == "tag")
				{
					if (modifier == ":" || modifier == "=" || modifier == "!")
					{
						regex = new RegExp("!tag " + check + "\\b");
						return regex.test(card_notes);
					}
				}
				if (term == "a" || term == "art" || term == "artist")
				{
					if (modifier == ":" || modifier == "=" || modifier == "!")
					{
						return card_artist.includes(check);
					}
				}
			}

			return card_name.includes(token);
		}